version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.11.5 #
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/helto4real/go-hassclient

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      - run: mkdir -p builds # create the test results directory

      - restore_cache: # restores saved cache if no changes are detected since last run
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          keys:
            - v1-pkg-cache

      # Add these in a custom build image in the future
      # The windows version fails without this speciual goget 
      - run: GOOS=windows go get github.com/konsorten/go-windows-terminal-sequences
      # Rest is cool
      - run: go get github.com/mitchellh/gox 
      - run: go get golang.org/x/tools/cmd/cover
      - run: go get github.com/mattn/goveralls
      - run: go get ./...

      - run:
          name: "build and test"
          command: |
            # Use gox for multiple platforms
            gox -os="linux darwin windows" -arch="amd64"
            # Test with cover and race check and also test integrations
            go test -p 6 -v -race -cover -coverprofile=builds/coverage.out ./... -integration

      # Cache the loaded packages for faster use
      - save_cache: # Store cache in the /go/pkg directory
          key: v1-pkg-cache
          paths:
            - "/go/pkg"

      # Move the built artifacts to store
      - store_artifacts: # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: builds
          destination: builds

      # Finally publish to "coveralls"
      - run: /go/bin/goveralls -coverprofile=builds/coverage.out -service=circle-ci -repotoken $COVERALLS_TOKEN
